{"version":3,"sources":["components/loading/loading.js","components/bottom-bar/bottom-bar.js","components/bottom-bar/index.js","components/app/app.js","components/app/index.js","service-worker/service-worker.js","index.js"],"names":["Loading","react_default","a","createElement","className","menuList","path","text","BottomBar","map","item","i","react_router_dom","to","key","Menu","React","lazy","__webpack_require__","e","then","bind","NotFoundPage","HomePage","Promise","all","LoginPage","UserPage","PostsDetailPage","PhotosPage","PhotosDetailPage","App","Fragment","basename","process","Suspense","fallback","loading_loading","react_router","component","exact","components_bottom_bar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_app","document","getElementById","URL","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.646a8ae0.chunk.js","sourcesContent":["import React from 'react';\nimport './loading.scss';\n\nconst Loading = () => {\n  return (\n    <div className=\"loading\">\n      <h3>\n        Loading...\n      </h3>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './bottom-bar.scss';\n\nconst menuList = [\n  {\n    path: '/',\n    text: 'Home',\n  },\n  {\n    path: '/menu',\n    text: 'Menu',\n  },\n];\n\nconst BottomBar = () => {\n  return (\n    <div className=\"bottom-bar\">\n      {\n        !!menuList && menuList.map((item, i) => (\n          <Link to={item.path} key={i}>\n            <div className=\"bottom-bar__item\">{item.text}</div>\n          </Link>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default BottomBar;\n","import BottomBar from './bottom-bar';\n\nexport default BottomBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './app.scss';\n\n// Components\nimport Loading from '../loading';\nimport BottomBar from '../bottom-bar';\n\nconst Menu = React.lazy(() => import('../menu'));\nconst NotFoundPage = React.lazy(() => import('../not-found-page'));\nconst HomePage = React.lazy(() => import('../home-page'));\nconst LoginPage = React.lazy(() => import('../login-page'));\nconst UserPage = React.lazy(() => import('../user-page'));\nconst PostsDetailPage = React.lazy(() => import('../posts-detail-page'));\nconst PhotosPage = React.lazy(() => import('../photos-page'));\nconst PhotosDetailPage = React.lazy(() => import('../photos-detail-page'));\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <main className=\"app\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <div className=\"app__router-view\">\n            <React.Suspense fallback={<Loading />}>\n              <Switch>\n                <Route key=\"1\" path=\"/\" component={HomePage} exact />\n                <Route key=\"2\" path=\"/menu\" component={Menu} exact />\n                <Route key=\"3\" path=\"/login\" component={LoginPage} exact />\n                <Route key=\"4\" path=\"/users/:id\" component={UserPage} exact />\n                <Route key=\"5\" path=\"/posts/:id\" component={PostsDetailPage} exact />\n                <Route key=\"6\" path=\"/photos-list/:id\" component={PhotosPage} exact />\n                <Route key=\"7\" path=\"/photos-detail/:id\" component={PhotosDetailPage} exact />\n                <Route key=\"100\" path=\"/loading\" component={Loading} exact />\n                <Route key=\"0\" component={NotFoundPage} />\n              </Switch>\n            </React.Suspense>\n            <BottomBar />\n          </div>\n        </Router>\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import App from './app';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}